# ansible_aro_upgrade_project/roles/aro_f1_checks/tasks/assess_initial_path.yml
---
# Analisa as atualizações disponíveis e sugere próximos passos lógicos.
# Utiliza aro_cluster_info (coletado em get_cluster_info.yml)
# e target_final_eus_major_minor, eus_known_progression (de group_vars).

- name: ASSESS_PATH | Extrair EUS major.minor atual da versão do cluster
  ansible.builtin.set_fact:
    current_eus_major_minor: "{{ aro_cluster_info.current_version.split('.')[0] }}.{{ aro_cluster_info.current_version.split('.')[1] }}"

- name: ASSESS_PATH | Determinar próximo EUS major.minor lógico na sequência de progressão EUS
  vars:
    # Encontra o índice do EUS atual na lista de progressão conhecida
    current_eus_index_in_progression_var: >- # Renomeado para evitar confusão de escopo imediato
      {{ eus_known_progression.index(current_eus_major_minor)
         if current_eus_major_minor in eus_known_progression else -1 }}
    # Calcula o índice do próximo EUS na lista, garantindo que o índice atual é inteiro
    next_eus_index_in_progression_var: "{{ (current_eus_index_in_progression_var | int) + 1 }}"
  ansible.builtin.set_fact:
    # Define o próximo EUS minor lógico se estiver dentro dos limites da lista de progressão
    next_logical_eus_major_minor: >-
      {{ eus_known_progression[(next_eus_index_in_progression_var | int)] # Força int para índice da lista
         if (current_eus_index_in_progression_var | int != -1) and
            ((next_eus_index_in_progression_var | int) < (eus_known_progression | length | int)) # Força int para comparação
         else 'N/A' }}

- name: ASSESS_PATH | Verificar se já estamos no EUS minor alvo ou além
  ansible.builtin.set_fact:
    assessment_already_at_or_beyond_target_eus: "{{ (current_eus_major_minor >= target_final_eus_major_minor) }}"

- name: ASSESS_PATH | Procurar por atualização Z-stream recomendada DENTRO do canal EUS ATUAL
  vars:
    zstream_update_candidates_in_current_eus: >-
      {{ aro_cluster_info.available_updates |
         selectattr('channel', 'defined') |
         selectattr('version', 'match', '^' + current_eus_major_minor + '\\..*') |
         selectattr('channel', 'equalto', 'eus-' + current_eus_major_minor) |
         selectattr('version', '>', aro_cluster_info.current_version) |
         sort(attribute='version', reverse=true) }}
  ansible.builtin.set_fact:
    assessment_recommended_zstream_update: "{{ zstream_update_candidates_in_current_eus | first | default({}) }}"

- name: ASSESS_PATH | Procurar por atualização para o PRÓXIMO canal EUS lógico
  vars:
    # Usar a variável de fato 'next_logical_eus_major_minor' que já foi calculada e é mais segura
    next_eus_update_candidates: >-
      {{ aro_cluster_info.available_updates |
         selectattr('channel', 'defined') |
         selectattr('version', 'match', '^' + next_logical_eus_major_minor + '\\..*') | # Usa o fato já definido
         selectattr('channel', 'equalto', 'eus-' + next_logical_eus_major_minor) | # Usa o fato já definido
         sort(attribute='version') }}
  ansible.builtin.set_fact:
    assessment_recommended_next_eus_update: "{{ next_eus_update_candidates | first | default({}) }}"
  when: next_logical_eus_major_minor != 'N/A' and next_logical_eus_major_minor is defined # Checa o fato

- name: ASSESS_PATH | Armazenar resultado da avaliação do caminho inicial para fácil acesso
  ansible.builtin.set_fact:
    aro_initial_path_assessment:
      current_eus_is_target_or_beyond: "{{ assessment_already_at_or_beyond_target_eus }}"
      current_eus_on_cluster: "{{ current_eus_major_minor }}"
      next_logical_eus_channel: "{{ 'eus-' + next_logical_eus_major_minor if next_logical_eus_major_minor != 'N/A' and next_logical_eus_major_minor is defined else 'N/A' }}"
      recommended_zstream_update: "{{ assessment_recommended_zstream_update }}"
      recommended_next_eus_update: "{{ assessment_recommended_next_eus_update | default({}) }}"

- name: ASSESS_PATH | Debug da avaliação do caminho inicial
  ansible.builtin.debug:
    var: aro_initial_path_assessment
    verbosity: 1