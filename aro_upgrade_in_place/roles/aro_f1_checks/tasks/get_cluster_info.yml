---
# Coleta informações básicas do cluster, operadores, nós e MCPs.
# Módulos kubernetes.core usarão credenciais do ambiente AAP.

- name: GET_CLUSTER_INFO | Obter informações do objeto ClusterVersion 'version'
  kubernetes.core.k8s_info:
    kind: ClusterVersion
    api_version: config.openshift.io/v1
    name: version
  register: r_cv_details
  failed_when: "r_cv_details.resources | length == 0"
  retries: 3
  delay: 10

- name: GET_CLUSTER_INFO | Definir fatos básicos do cluster a partir do ClusterVersion
  ansible.builtin.set_fact:
    aro_cluster_info:
      cluster_version_obj: "{{ r_cv_details.resources[0] }}"
      current_version: "{{ r_cv_details.resources[0].status.desired.version }}"
      current_channel: "{{ r_cv_details.resources[0].spec.channel | default('') }}"
      current_image: "{{ r_cv_details.resources[0].status.desired.image }}"
      available_updates: "{{ r_cv_details.resources[0].status.availableUpdates | default([]) }}"
      history: "{{ r_cv_details.resources[0].status.history | default([]) }}"
      conditions: "{{ r_cv_details.resources[0].status.conditions | default([]) }}"
    cv_condition_available: "{{ (r_cv_details.resources[0].status.conditions | selectattr('type', 'equalto', 'Available') | map(attribute='status') | first | default('False')) == 'True' }}"
    cv_condition_progressing: "{{ (r_cv_details.resources[0].status.conditions | selectattr('type', 'equalto', 'Progressing') | map(attribute='status') | first | default('False')) == 'True' }}"
    cv_condition_degraded: "{{ (r_cv_details.resources[0].status.conditions | selectattr('type', 'equalto', 'Degraded') | map(attribute='status') | first | default('False')) == 'True' }}"

- name: GET_CLUSTER_INFO | Obter status de todos os ClusterOperators
  kubernetes.core.k8s_info:
    kind: ClusterOperator
    api_version: config.openshift.io/v1
  register: r_cluster_operators

- name: GET_CLUSTER_INFO | Inicializar listas para status de ClusterOperator
  ansible.builtin.set_fact:
    _degraded_operator_names_list: []
    _not_available_operator_names_list: []

- name: GET_CLUSTER_INFO | Iterar sobre ClusterOperators para checar condições
  ansible.builtin.set_fact:
    _degraded_operator_names_list: >-
      {{ _degraded_operator_names_list + [item.metadata.name]
         if (item.status.conditions | selectattr('type', 'equalto', 'Degraded') | selectattr('status', 'equalto', 'True') | list | length > 0)
         else _degraded_operator_names_list }}
    _not_available_operator_names_list: >-
      {{ _not_available_operator_names_list + [item.metadata.name]
         if (item.status.conditions | selectattr('type', 'equalto', 'Available') | selectattr('status', 'equalto', 'False') | list | length > 0)
         else _not_available_operator_names_list }}
  loop: "{{ r_cluster_operators.resources }}"
  loop_control:
    label: "{{ item.metadata.name }}"
  when:
    - item.status is defined
    - item.status.conditions is defined

- name: GET_CLUSTER_INFO | Definir fatos finais do status dos ClusterOperators
  ansible.builtin.set_fact:
    aro_co_status:
      total: "{{ r_cluster_operators.resources | length }}"
      all_available: "{{ _not_available_operator_names_list | length == 0 }}"
      degraded_operators: "{{ _degraded_operator_names_list }}"
    aro_co_degraded_count: "{{ _degraded_operator_names_list | length }}"

# Em roles/aro_f1_checks/tasks/get_cluster_info.yml

# ... (tasks anteriores para ClusterVersion, ClusterOperators) ...

- name: GET_CLUSTER_INFO | Obter status de todos os Nós (Nodes)
  kubernetes.core.k8s_info:
    kind: Node
  register: r_nodes

- name: GET_CLUSTER_INFO | Inicializar contadores/listas para status dos Nós
  ansible.builtin.set_fact:
    _temp_nodes_ready_count: 0
    _temp_nodes_not_ready_list: []

- name: GET_CLUSTER_INFO | Iterar sobre Nós para Depuração e Atualização de Status
  ansible.builtin.include_tasks: process_node_item.yml # Chama o novo arquivo
  loop: "{{ r_nodes.resources }}"
  loop_control:
    label: "{{ item.metadata.name }}"
    loop_var: item # 'item' será a variável de loop disponível em process_node_item.yml
  when:
    - item.status is defined # Garante que o nó tem um status
    - item.status.conditions is defined # Garante que o nó tem condições para avaliar

- name: GET_CLUSTER_INFO | Definir fatos finais do status dos Nós
  ansible.builtin.set_fact:
    aro_node_status:
      total: "{{ r_nodes.resources | length }}"
      ready_count: "{{ _temp_nodes_ready_count }}"
      not_ready_list: "{{ _temp_nodes_not_ready_list }}"

- name: GET_CLUSTER_INFO | Obter status dos MachineConfigPools (MCPs)
  kubernetes.core.k8s_info:
    kind: MachineConfigPool
    api_version: machineconfiguration.openshift.io/v1
  register: r_mcps

- name: GET_CLUSTER_INFO | Inicializar status para MCPs
  ansible.builtin.set_fact:
    _temp_mcp_all_updated_flag: true # Assumir que todos estão atualizados inicialmente
    _temp_mcp_degraded_list: []

- name: GET_CLUSTER_INFO | Iterar sobre MCPs para verificar status
  ansible.builtin.set_fact:
    _temp_mcp_all_updated_flag: >-
      {{ _temp_mcp_all_updated_flag
         if (item.status.updatedMachineCount | int == item.status.machineCount | int )
         else false }}
    _temp_mcp_degraded_list: >-
      {{ _temp_mcp_degraded_list + [item.metadata.name]
         if (item.status.conditions is defined and (item.status.conditions | selectattr('type', 'equalto', 'Degraded') | selectattr('status', 'equalto', 'True') | list | length > 0))
         else _temp_mcp_degraded_list }}
  loop: "{{ r_mcps.resources }}"
  loop_control:
    label: "{{ item.metadata.name }}"
  when:
    - item.status is defined
    - item.status.updatedMachineCount is defined
    - item.status.machineCount is defined
    # A condição para _temp_mcp_all_updated_flag já trata o update,
    # aqui o when é mais para garantir que os dados existem para a checagem de degradado.

# Em roles/aro_f1_checks/tasks/get_cluster_info.yml

# ... (tasks anteriores, incluindo a iteração sobre MCPs para _temp_mcp_all_updated_flag e _temp_mcp_degraded_list) ...

# Adicione esta task de debug ANTES de "Definir fatos finais do status dos MCPs"
- name: "DEBUG MCPs | Conteúdo de r_mcps.resources antes de construir mcp_details"
  ansible.builtin.debug:
    var: r_mcps.resources
    verbosity: 2 # Mostra com -vv ou mais

- name: GET_CLUSTER_INFO | Inicializar dicionário para mcp_details
  ansible.builtin.set_fact:
    _temp_mcp_details_dict: {}

- name: GET_CLUSTER_INFO | Popular mcp_details de forma segura
  ansible.builtin.set_fact:
    _temp_mcp_details_dict: "{{ _temp_mcp_details_dict | combine({ item.metadata.name: item.status }) }}"
  loop: "{{ r_mcps.resources }}"
  loop_control:
    label: "{{ item.metadata.name | default('MCP_ITEM_SEM_NOME_METADATA') }}"
    loop_var: item
  when:
    - item.metadata is defined
    - item.metadata.name is defined
    - item.status is defined # Importante para o valor do dicionário

- name: GET_CLUSTER_INFO | Definir fatos finais do status dos MCPs
  ansible.builtin.set_fact:
    aro_mcp_status:
      all_updated: "{{ _temp_mcp_all_updated_flag }}"
      degraded_mcps: "{{ _temp_mcp_degraded_list }}"
      mcp_details: "{{ _temp_mcp_details_dict }}" # Usa o dicionário construído de forma segura

- name: GET_CLUSTER_INFO | Sumarizar saúde geral do cluster para display e validação rápida
  ansible.builtin.set_fact:
    aro_cluster_health_summary: >-
      CV_Available={{ cv_condition_available }},
      CV_Progressing={{ cv_condition_progressing }},
      CV_Degraded={{ cv_condition_degraded }};
      CO_All_Available={{ aro_co_status.all_available }} (Degraded_CO_Count={{ aro_co_degraded_count }});
      Nodes_Ready={{ aro_node_status.ready_count }}/{{ aro_node_status.total }} (Not_Ready_Nodes_Count={{ aro_node_status.not_ready_list | length }});
      MCPs_All_Updated={{ aro_mcp_status.all_updated }} (Degraded_MCP_Count={{ aro_mcp_status.degraded_mcps | length }})

- name: GET_CLUSTER_INFO | Salvar objetos coletados em um arquivo JSON para análise detalhada
  ansible.builtin.copy:
    content: |
      {
        "cluster_version": {{ aro_cluster_info | default({}) | to_nice_json(indent=2) }},
        "cluster_operators": {{ r_cluster_operators.resources | default([]) | to_nice_json(indent=2) }},
        "nodes": {{ r_nodes.resources | default([]) | to_nice_json(indent=2) }},
        "mcps": {{ r_mcps.resources | default([]) | to_nice_json(indent=2) }}
      }
    dest: "{{ f1_artifact_dir }}/cluster_objects_pre_upgrade.json"
  when: aro_cluster_info is defined