# ansible_aro_upgrade_project/roles/aro_f1_checks/tasks/app_health_baseline.yml
---
- name: APP_BASELINE | Identificar namespaces de negócio para baseline
  kubernetes.core.k8s_info:
    kind: Namespace
  register: r_all_k8s_namespaces

- name: APP_BASELINE | Filtrar namespaces de negócio alvo
  ansible.builtin.set_fact:
    target_business_namespaces_for_baseline: >-
      {{ r_all_k8s_namespaces.resources |
         map(attribute='metadata.name') |
         reject('in', excluded_namespaces_for_apps) |
         select('match', '(' + (business_namespaces_patterns | join('|')) + ')') | list }}
  vars:
    excluded_namespaces_for_apps: "{{ excluded_namespaces_for_apps }}" # de group_vars
    business_namespaces_patterns: "{{ business_namespaces_patterns }}" # de group_vars

- name: APP_BASELINE | Coletar status dos pods por namespace de negócio
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ item }}"
  register: r_pods_in_selected_namespace
  loop: "{{ target_business_namespaces_for_baseline }}"
  loop_control:
    label: "{{ item }}"

- name: APP_BASELINE | Processar e estruturar os dados do baseline de aplicações
  ansible.builtin.set_fact:
    app_status_baseline_json_data: "{{ app_status_baseline_json_data | default({}) | combine({
      item.item: {
        'namespace': item.item,
        'total_pods': item.resources | length,
        'status_summary': {
          'Running': (item.resources | selectattr('status.phase', 'equalto', 'Running') | list | length),
          'Pending': (item.resources | selectattr('status.phase', 'equalto', 'Pending') | list | length),
          'Failed': (item.resources | selectattr('status.phase', 'equalto', 'Failed') | list | length),
          'Succeeded': (item.resources | selectattr('status.phase', 'equalto', 'Succeeded') | list | length),
          'Unknown': (item.resources | selectattr('status.phase', 'equalto', 'Unknown') | list | length)
        },
        'restarts_summary': {
            'total_restarts_all_pods': (item.resources | selectattr('status.containerStatuses', 'defined') |
                                        map(attribute='status.containerStatuses') | flatten |
                                        sum(attribute='restartCount')),
            'pods_with_restarts_names': (item.resources | selectattr('status.containerStatuses', 'defined') |
                                    select('has_restarts') | # Precisa do teste customizado ou lógica expandida
                                    map(attribute='metadata.name') | unique | list )
        },
        'pods_in_crashloop_names': (item.resources | selectattr('status.containerStatuses', 'defined') |
                               map(attribute='status.containerStatuses') | flatten |
                               selectattr('state.waiting.reason', 'defined') |
                               selectattr('state.waiting.reason', 'equalto', 'CrashLoopBackOff') |
                               # Precisaria voltar ao pod original para pegar o nome, ou registrar mais dados.
                               # Esta parte é simplificada para apenas contar.
                               list | length), # Mudei para contagem para simplificar
        'pods_details_list': item.resources | map(attribute='metadata.name') | list
      }
    }) }}"
  loop: "{{ r_pods_in_selected_namespace.results }}"
  vars: # Vars para o filtro/teste 'has_restarts' (se você criar um)
    has_restarts_min_count: 0

- name: APP_BASELINE | Salvar baseline de aplicações em arquivo JSON
  ansible.builtin.copy:
    content: "{{ app_status_baseline_json_data | default({}) | to_nice_json(indent=2) }}"
    dest: "{{ f1_artifact_dir }}/app_status_pre_upgrade.json"
  when: app_status_baseline_json_data is defined