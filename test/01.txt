Compreendido. Vamos começar do zero no diretório `aro-upgrade` e adicionar o teste ao final de cada passo.

**Passo 1: Estrutura Inicial, Role `acm_search_util` e Playbook de Teste**

Neste passo, criaremos a estrutura base do projeto Ansible, a role `acm_search_util` para interagir com o ACM Search API (usando `oc search`) e um playbook simples para validar sua funcionalidade e a comunicação com seu ACM Hub.

1.  Crie o diretório base do seu projeto e a estrutura inicial das roles:

    ```bash
    mkdir aro-upgrade
    cd aro-upgrade
    mkdir -p roles/acm_search_util/{tasks,meta,defaults,vars}
    ```

2.  Crie os arquivos da role `acm_search_util`:

      * `aro-upgrade/roles/acm_search_util/tasks/main.yml`:

        ```yaml
        ---
        # Role to perform queries against Red Hat ACM Search API using oc command
        # This role requires the 'oc' binary to be installed and configured in the Execution Environment.
        # It assumes ACM Hub connection details (acm_hub_url, acm_user, acm_pass) are provided as variables to the role call.
        # It assumes the search query base (search_query_base), optional target cluster name (target_cluster_name),
        # and optional environment label filter (environment_label_filter) are provided.
        # The tasks run on the Execution Environment (localhost).

        - name: "ACM SEARCH UTIL: Authenticate to ACM Hub"
          ansible.builtin.debug:
            msg: "Authenticating to ACM Hub: {{ acm_hub_url }}"

        - name: "ACM SEARCH UTIL: Perform Authentication"
          redhat.openshift.openshift_auth:
            host: "{{ acm_hub_url }}"
            username: "{{ acm_user }}"
            password: "{{ acm_pass }}"
            validate_certs: no # Ajuste para 'yes' se seus certificados forem confiáveis no EE
          register: acm_hub_auth_results
          delegate_to: localhost

        - name: "ACM SEARCH UTIL: Build search query string with filters"
          vars:
            # Start with the base query (e.g., kind=ManagedCluster Infrastructure.Cloud=Azure)
            query_string: "{{ search_query_base | default('kind=ManagedCluster Infrastructure.Cloud=Azure') }}"
            # Add cluster filter if target_cluster_name is provided
            query_with_cluster: "{{ query_string }}{{ ' cluster=' ~ target_cluster_name if target_cluster_name is defined and target_cluster_name != '' else '' }}"
            # Add environment label filter if provided
            query_with_environment: "{{ query_with_cluster }}{{ ' ' ~ environment_label_filter if environment_label_filter is defined and environment_label_filter != '' else '' }}"
          ansible.builtin.set_fact:
            final_search_query: "{{ query_with_environment }}"
          delegate_to: localhost

        - name: "ACM SEARCH UTIL: Build oc search command"
          vars:
            # Use the token from the authentication result. Ensure oc uses the token and skips certs if needed.
            oc_search_cmd: "oc --server={{ acm_hub_url }} --token={{ acm_hub_auth_results['openshift_auth']['api_key'] }} {{ '--insecure-skip-tls-verify=true' if acm_hub_auth_results['openshift_auth']['validate_certs'] == false else '' }} search '{{ final_search_query | replace(\"'\", \"'\\''\") }}' -o json" # Usar replace para escapar aspas simples na query
          ansible.builtin.set_fact:
            oc_search_command: "{{ oc_search_cmd }}"
          delegate_to: localhost

        - name: "ACM SEARCH UTIL: Execute oc search query on the hub"
          ansible.builtin.shell: "{{ oc_search_command }}"
          register: search_results_raw
          changed_when: false
          delegate_to: localhost

        - name: "ACM SEARCH UTIL: Parse Search results"
          ansible.builtin.set_fact:
            acm_search_results: "{{ (search_results_raw.stdout | from_json).get('items', []) }}"
          delegate_to: localhost

        # The variable `acm_search_results` is now available in the playbook that included this role.
        ```

      * `aro-upgrade/roles/acm_search_util/meta/main.yml`:

        ```yaml
        galaxy_info:
          author: Your Name
          description: Role to perform queries against Red Hat ACM Search API via oc command
          company: Your Company

          license: license (GPL-2.0-or-later, MIT, etc)

          min_ansible_version: 2.12

          galaxy_tags:
            - kubernetes
            - openshift
            - acm
            - search

        dependencies:
          - name: openshift.redhat
            version: "*"
          - name: kubernetes.core
            version: "*"

        ```

      * `aro-upgrade/roles/acm_search_util/defaults/main.yml`:

        ```yaml
        ---
        # Default ACM Hub connection details - OVERRIDE THESE SECURELY VIA AAP
        # acm_hub_url: "https://api.your-acm-hub.example.com:6443" # SUBSTITUIR COM VALOR SEGURO NO AAP
        # acm_user: "acm_admin_user" # SUBSTITUIR COM VALOR SEGURO NO AAP
        # acm_pass: "acm_admin_password" # SUBSTITUIR COM VALOR SEGURO NO AAP - USAR VAULT!!!

        # Default search query base - Inclui filtro por Infrastructure/Cloud para focar em ARO
        search_query_base: "kind=ManagedCluster Infrastructure.Cloud=Azure"

        # Default target cluster name - Usado para filtrar a busca para um cluster específico
        target_cluster_name: ""

        # Default environment label filter - Usado para filtrar por ambiente (dv, ho)
        environment_label_filter: "" # Ex: ambiente=dv ou ambiente=ho
        ```

      * `aro-upgrade/roles/acm_search_util/vars/main.yml`:

        ```yaml
        ---
        # Non-sensitive variables for acm_search_util role.
        ```

      * `aro-upgrade/roles/acm_search_util/README.md`:

        ````markdown
        # acm_search_util Role

        This role provides tasks to query the Red Hat ACM Search API using the `oc search` command from within an Ansible Execution Environment. It's designed to be included by other roles or playbooks that need to collect information about managed clusters via the ACM Hub.

        **Requirements:**

        * `oc` binary installed and accessible in the Execution Environment's PATH.
        * Ansible collections: `openshift.redhat`, `kubernetes.core`.
        * Connectivity from the Execution Environment to the ACM Hub API endpoint.

        **Role Variables:**

        * `acm_hub_url` (Required): The API URL of the Red Hat Advanced Cluster Management Hub cluster (e.g., `https://api.your-acm-hub.example.com:6443`).
        * `acm_user` (Required): Username to authenticate with the ACM Hub. This user needs permissions to perform Search queries.
        * `acm_pass` (Required): Password for the ACM Hub user. **Use Ansible Vault to encrypt this variable in production.**
        * `search_query_base` (Optional): The base search query string (defaults to `kind=ManagedCluster Infrastructure.Cloud=Azure`). Overwrite for specific resource searches.
        * `search_query` (Required when overriding base): The full search query string (overrides `search_query_base` if provided).
        * `target_cluster_name` (Optional): The name of a specific managed cluster to filter search results (e.g., `my-managed-cluster-pr-01a`). If omitted, the search applies across all clusters visible to the ACM user (filtered by `search_query_base`).
        * `environment_label_filter` (Optional): A label selector string to filter results by environment (e.g., `ambiente=dv`, `ambiente=ho`). Applies in addition to `search_query_base`.

        **Outputs:**

        * `acm_search_results` (Fact): A list of dictionaries, where each dictionary represents a resource found by the `oc search` query in JSON format. This variable is set as an Ansible fact and is available in the playbook that includes this role.

        **Example Usage (within another role or playbook):**

        ```yaml
        # Example 1: Get all ARO clusters in the 'ho' environment
        - name: Get HO ARO Clusters via ACM Search
          ansible.builtin.include_role:
            name: acm_search_util # Assuming acm_search_util is in your roles path
          vars:
            acm_hub_url: "{{ acm_hub_api_variable }}" # Get from Survey/Workflow vars
            acm_user: "{{ acm_admin_user_variable }}"
            acm_pass: "{{ acm_admin_password_variable }}" # Use Vault!
            # Using defaults for search_query_base (ManagedCluster Infrastructure.Cloud=Azure)
            environment_label_filter: "ambiente=ho" # Filter by label

        - name: Debug the retrieved HO clusters
          debug:
            var: acm_search_results

        # Example 2: Get Deployments in a specific ARO cluster
        - name: Get Deployments in a specific ARO cluster via ACM Search
          ansible.builtin.include_role:
            name: acm_search_util
          vars:
            acm_hub_url: "{{ acm_hub_api_variable }}"
            acm_user: "{{ acm_admin_user_variable }}"
            acm_pass: "{{ acm_admin_password_variable }}" # Use Vault!
            search_query: "kind=Deployment apiVersion=apps/v1" # Overwrite base query for specific resource
            target_cluster_name: "name-of-your-dv-cluster" # Filter for a specific cluster
            # environment_label_filter is not needed here if filtering by cluster name is enough
        ````

        ```
        
        ```

3.  Crie um playbook simples na raiz do diretório `aro-upgrade` para testar a role `acm_search_util`. Este playbook incluirá as variáveis sensíveis (com placeholders para Vault) e demonstrará o uso do filtro por ambiente.

      * `aro-upgrade/test_acm_search.yml`:
        ```yaml
        ---
        - name: Test ACM Search Util Role and Environment Filter
          hosts: localhost # Rodar no Execution Environment (onde o 'oc' está)
          gather_facts: false

          vars:
            # !!! CONFIGURE SUAS CREDENCIAIS ACM AQUI (USANDO VAULT PARA SENHAS) !!!
            # Exemplo de como definir variáveis sensíveis (USE VAULT PARA acm_pass!)
            test_acm_hub_url: "YOUR_ACM_HUB_URL" # <<<<< SUBSTITUA PELA URL DO SEU ACM HUB
            test_acm_user: "YOUR_ACM_USER"     # <<<<< SUBSTITUA PELO SEU USUÁRIO ACM
            # test_acm_pass: "YOUR_ACM_PASSWORD" # <<<<< SUBSTITUA PELA SUA SENHA ACM E COLOQUE NO VAULT

            # Variável para a senha (carregada do vault)
            # Exemplo: Defina 'test_acm_pass' no vault file e carregue aqui
            # Ex: ansible-vault create group_vars/all/vault.yml
            # Conteúdo: test_acm_pass: 'SUA_SENHA_REAL'
            # Então no playbook: vars: { test_acm_pass: "{{ vault_acm_password }}" } # Nome da var no vault

            # --- Configuração para Teste ---
            test_environment: "ho" # <<<<< SUBSTITUA POR 'dv' ou 'ho' para testar o filtro
            # O filtro de Infrastructure.Cloud=Azure já está no defaults/main.yml da role

          tasks:
            - name: Include ACM Search Util role to find Managed Clusters by Environment
              ansible.builtin.include_role:
                name: acm_search_util # Assumindo que a role está em ./roles
              vars:
                acm_hub_url: "{{ test_acm_hub_url }}"
                acm_user: "{{ test_acm_user }}"
                # Carregar a senha do vault. O nome exato da variável no vault depende de como você a salvou.
                # Exemplo: se você salvou como 'acm_admin_password' no vault
                acm_pass: "{{ lookup('ansible.builtin.env', 'TEST_ACM_PASS_VAULT_PASSWORD') | ansible.builtin.vault_lookup('vault_acm_admin_password') }}" # Exemplo usando lookup no vault (Adapte!)
                # Ou, se a senha está diretamente em um vault file carregado
                # acm_pass: "{{ test_acm_pass }}" # Assumindo que test_acm_pass já veio do vault

                # search_query_base defaultará para "kind=ManagedCluster Infrastructure.Cloud=Azure"
                environment_label_filter: "ambiente={{ test_environment }}" # Usa a variável de teste para filtrar por label

            - name: Debug the list of ARO clusters found in the specified environment
              ansible.builtin.debug:
                msg: "Encontrados {{ acm_search_results | length }} clusters ARO no ambiente '{{ test_environment }}': {{ acm_search_results | map(attribute='name') | default([]) }}"
              # A variável 'acm_search_results' é populada pela role incluída.

            - name: Assert that at least one cluster was found in the environment
              ansible.builtin.assert:
                that:
                  - acm_search_results is defined
                  - acm_search_results is not none
                  - acm_search_results | length > 0
                fail_msg: "Nenhum cluster ARO encontrado no ambiente '{{ test_environment }}' com a query: {{ acm_search_results_raw.ansible_facts.final_search_query }}" # Acessa a query final da role para debug

            - name: Include ACM Search Util role to find Deployments in the first found cluster
              # Testa a funcionalidade de filtrar por cluster específico
              ansible.builtin.include_role:
                name: acm_search_util
              vars:
                acm_hub_url: "{{ test_acm_hub_url }}"
                acm_user: "{{ test_acm_user }}"
                 # Carregar a senha do vault (adapte)
                acm_pass: "{{ lookup('ansible.builtin.env', 'TEST_ACM_PASS_VAULT_PASSWORD') | ansible.builtin.vault_lookup('vault_acm_admin_password') }}" # Exemplo (Adapte!)
                # acm_pass: "{{ test_acm_pass }}" # Assumindo que test_acm_pass já veio do vault

                search_query: "kind=Deployment apiVersion=apps/v1" # Sobrescreve a query base para buscar Deployments
                # Use o nome do primeiro cluster encontrado (se houver)
                target_cluster_name: "{{ acm_search_results[0].name if acm_search_results | length > 0 else '' }}"
                # environment_label_filter não é necessário aqui se filtrar por cluster name é suficiente

            - name: Debug Deployments found in the first cluster
              ansible.builtin.debug:
                msg: "Deployments encontrados no cluster '{{ acm_search_results_raw.ansible_facts.final_search_query | split('cluster=') | last | split(' ')[0] }}': {{ acm_search_results | map(attribute='name') | default([]) }}" # Extrair nome do cluster da query final para debug

            - name: Assert that Deployments query did not fail
              ansible.builtin.assert:
                that:
                  - acm_search_results is defined
                  - acm_search_results is not none
                  # Pode haver 0 deployments, mas a query não deve falhar.
                  # Verificar se search_results_raw foi bem sucedido.
                  - acm_search_results_raw is success
                success_msg: "Teste de busca de Deployments concluído com sucesso."
        ```

4.  **Configure o Vault e Execute o Teste:**

      * Instale as coleções necessárias se ainda não o fez:
        ```bash
        ansible-galaxy collection install openshift.redhat kubernetes.core azure.azcollection
        ```
      * **Configure o Ansible Vault:** Crie um arquivo vault para armazenar suas senhas sensíveis (senha do usuário ACM, chave do Azure Storage Account).
        ```bash
        ansible-vault create vault.yml
        # Digite e confirme sua senha mestra do vault.
        # Dentro do editor, adicione suas variáveis:
        # acm_admin_password: SuaSenhaACMReal
        # azure_storage_key: SuaChaveAzureReal
        ```
      * **Substitua os placeholders no `test_acm_search.yml`** (`YOUR_ACM_HUB_URL`, `YOUR_ACM_USER`) e ajuste a lógica de carregamento da senha do vault para corresponder ao nome da variável que você usou no `vault.yml`. A forma `lookup('ansible.builtin.env', 'TEST_ACM_PASS_VAULT_PASSWORD') | ansible.builtin.vault_lookup('vault_acm_admin_password')` é um exemplo de como usar uma variável de ambiente para a senha do vault e carregar uma variável específica do vault.
      * Execute o playbook, fornecendo a senha do vault (via linha de comando, variável de ambiente ou arquivo):
        ```bash
        ansible-playbook test_acm_search.yml --ask-vault-pass
        # ou usando variável de ambiente:
        # export ANSIBLE_VAULT_PASSWORD="sua_senha_do_vault"
        # ansible-playbook test_acm_search.yml
        ```

Este teste verificará se a role `acm_search_util` consegue autenticar no ACM Hub e executar consultas filtradas por Infrastructure/Cloud (que está no default) e pela label `ambiente`. Ele também testa a busca de um tipo de recurso específico em um único cluster encontrado. A saída do debug mostrará os clusters encontrados e, se tudo funcionar, o teste não falhará nos asserts.

Este é o primeiro passo funcional e testável, com considerações de segurança para dados sensíveis desde o início. Com a role `acm_search_util` validada, podemos prosseguir para a role `health_check_upgrade`.
