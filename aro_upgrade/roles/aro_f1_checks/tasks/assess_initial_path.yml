# roles/aro_f1_checks/tasks/assess_initial_path.yml
---
- name: ASSESS_PATH | Extrair EUS major.minor atual da versão do cluster
  ansible.builtin.set_fact:
    current_eus_major_minor: "{{ aro_cluster_info.current_version.split('.')[0] }}.{{ aro_cluster_info.current_version.split('.')[1] }}"

- name: "DEBUG | current_eus_major_minor (Após Extração)"
  ansible.builtin.debug:
    msg: "current_eus_major_minor: {{ current_eus_major_minor }}, Tipo: {{ current_eus_major_minor | type_debug }}"
  when: ansible_verbosity > 1

- name: ASSESS_PATH | Calcular índice EUS atual
  ansible.builtin.set_fact:
    current_eus_index_fact: >-
      {{ (eus_known_progression.index(current_eus_major_minor)
         if current_eus_major_minor in eus_known_progression else -1) | int }}

- name: "DEBUG | current_eus_index_fact (Após Cálculo)"
  ansible.builtin.debug:
    msg: "current_eus_index_fact: {{ current_eus_index_fact }}, Tipo: {{ current_eus_index_fact | type_debug }}"
  when: ansible_verbosity > 1

- name: ASSESS_PATH | Calcular próximo índice EUS
  ansible.builtin.set_fact:
    next_eus_index_fact: "{{ (current_eus_index_fact | int) + 1 }}"

- name: "DEBUG | next_eus_index_fact (Após Cálculo)"
  ansible.builtin.debug:
    msg: "next_eus_index_fact: {{ next_eus_index_fact }}, Tipo: {{ next_eus_index_fact | type_debug }}"
  when: ansible_verbosity > 1

- name: ASSESS_PATH | Determinar condição para calcular próximo EUS lógico
  vars:
    _length_eus_known_progression: "{{ eus_known_progression | length | int }}"
  ansible.builtin.set_fact:
    _can_determine_next_logical_eus: >-
      {{ ((current_eus_index_fact | int) != -1) and
         ((next_eus_index_fact | int) < _length_eus_known_progression) }}

- name: "DEBUG | _can_determine_next_logical_eus e _length_eus_known_progression"
  ansible.builtin.debug:
    msg:
      - "_can_determine_next_logical_eus: {{ _can_determine_next_logical_eus }}, Tipo: {{ _can_determine_next_logical_eus | type_debug }}"
      - "_length_eus_known_progression: {{ _length_eus_known_progression }}, Tipo: {{ _length_eus_known_progression | type_debug }}"
  when: ansible_verbosity > 1

- name: ASSESS_PATH | Definir próximo EUS major.minor lógico
  ansible.builtin.set_fact:
    next_logical_eus_major_minor: >-
      {{ eus_known_progression[(next_eus_index_fact | int)]
         if _can_determine_next_logical_eus
         else 'N/A' }}

- name: "DEBUG | next_logical_eus_major_minor (Após Definição)"
  ansible.builtin.debug:
    msg: "next_logical_eus_major_minor: {{ next_logical_eus_major_minor }}, Tipo: {{ next_logical_eus_major_minor | type_debug }}"
  when: ansible_verbosity > 1

- name: ASSESS_PATH | Verificar se já estamos no EUS minor alvo ou além
  ansible.builtin.set_fact:
    assessment_already_at_or_beyond_target_eus: "{{ (current_eus_major_minor >= target_final_eus_major_minor) }}"

- name: ASSESS_PATH | Determinar o payload do próximo salto escolhido e Acknowledgements
  vars:
    _zstream_candidates: >-
      {{ aro_cluster_info.available_updates | default([]) |
         selectattr('channel', 'defined') |
         selectattr('version', 'match', '^' + current_eus_major_minor + '\\..*') |
         selectattr('channel', 'equalto', 'eus-' + current_eus_major_minor) |
         selectattr('version', '>', aro_cluster_info.current_version) |
         sort(attribute='version', reverse=true) }}
    _recommended_zstream_hop: "{{ _zstream_candidates | first | default({}) }}"
    _next_eus_candidates: >-
      {{ aro_cluster_info.available_updates | default([]) |
         selectattr('channel', 'defined') |
         selectattr('version', 'match', '^' + next_logical_eus_major_minor + '\\..*') |
         selectattr('channel', 'equalto', 'eus-' + next_logical_eus_major_minor) |
         sort(attribute='version') if next_logical_eus_major_minor != 'N/A' and next_logical_eus_major_minor is defined else [] }}
    _recommended_next_eus_hop: "{{ _next_eus_candidates | first | default({}) }}"
  ansible.builtin.set_fact:
    _chosen_hop_payload: >-
      {{ _recommended_zstream_hop
         if _recommended_zstream_hop.version is defined
         else _recommended_next_eus_hop
         if _recommended_next_eus_hop.version is defined
         else {} }}
    _required_acks: >-
      {{ (_chosen_hop_payload.message | default('') | regex_findall('(acknowledge-[a-zA-Z0-9.-]+)') | unique | list)
         if _chosen_hop_payload.message is defined and _chosen_hop_payload.message
         else [] }}

- name: ASSESS_PATH | Armazenar resultado da avaliação do caminho inicial
  ansible.builtin.set_fact:
    aro_initial_path_assessment:
      current_eus_is_target_or_beyond: "{{ assessment_already_at_or_beyond_target_eus }}"
      current_eus_on_cluster: "{{ current_eus_major_minor }}"
      next_logical_eus_channel: "{{ 'eus-' + next_logical_eus_major_minor if next_logical_eus_major_minor != 'N/A' and next_logical_eus_major_minor is defined else 'N/A' }}"
      chosen_next_hop_details: "{{ _chosen_hop_payload }}"
      required_acknowledgements: "{{ _required_acks }}"
      # Mantendo os específicos para clareza se necessário, embora chosen_next_hop_details seja o principal
      recommended_zstream_update: "{{ _recommended_zstream_hop }}"
      recommended_next_eus_update: "{{ _recommended_next_eus_hop }}"

- name: ASSESS_PATH | Debug da avaliação do caminho inicial (Sumário)
  ansible.builtin.debug:
    var: aro_initial_path_assessment
    verbosity: 1