# roles/aro_f2_upgrade_tasks/tasks/trigger_and_monitor_upgrade.yml
---
# Vars Globais Esperadas da Role/Playbook:
# _target_hop_version_role, _target_hop_image_role, _target_hop_channel_role,
# _current_cluster_channel_fact_role, k8s_auth_params

- name: "UPGRADE_PREP | Identificar MCPs e definir nomes"
  kubernetes.core.k8s_info:
    kind: MachineConfigPool
    api_version: machineconfiguration.openshift.io/v1
  register: r_all_mcps_for_upgrade_phase
  retries: 3
  delay: 10

- name: "UPGRADE_PREP | Filtrar nomes de MCPs master e worker/infra"
  ansible.builtin.set_fact:
    _master_mcp_name_list_fact: >- #
      {{ r_all_mcps_for_upgrade_phase.resources | default([]) |
         selectattr('metadata.name', 'defined') |
         selectattr('metadata.name', 'equalto', 'master') |
         map(attribute='metadata.name') | list }}
    _worker_infra_mcp_name_list_fact: >- #
      {{ r_all_mcps_for_upgrade_phase.resources | default([]) |
         selectattr('metadata.name', 'defined') |
         map(attribute='metadata.name') |
         reject('equalto', 'master') | list }}
  when: r_all_mcps_for_upgrade_phase.resources is defined

- name: "UPGRADE_PREP | Definir nome do MCP master principal para monitoramento"
  ansible.builtin.set_fact:
    master_mcp_to_monitor_fact: "{{ _master_mcp_name_list_fact | first | default('master') }}"
  when: _master_mcp_name_list_fact is defined and _master_mcp_name_list_fact

- name: "UPGRADE_PREP | PAUSAR MCPs de Worker e Infra (lógica EUS)" #
  kubernetes.core.k8s_patch:
    kind: MachineConfigPool #
    name: "{{ item_mcp_name }}" #
    api_version: machineconfiguration.openshift.io/v1 #
    patch:
      - op: add # Adiciona se não existir, substitui se existir
        path: /spec/paused #
        value: true #
  loop: "{{ _worker_infra_mcp_name_list_fact | default([]) }}" #
  loop_control:
    loop_var: item_mcp_name
    label: "Pausando MCP {{ item_mcp_name }}"
  # Condição para ser EUS deve ser tratada no workflow que chama este playbook,
  # ou passada como uma var '_is_eus_hop: true' para esta role.
  # Exemplo: when: _is_eus_hop | default(false) | bool
  # Seus scripts verificam `update_channel.startswith('eus')` que pode ser usado aqui.
  when: _target_hop_channel_role is defined and (_target_hop_channel_role | string | lower is search('eus'))

- name: "UPGRADE_TRIGGER | Definir Canal de Upgrade (se necessário)" #
  kubernetes.core.k8s_patch:
    kind: ClusterVersion #
    name: version #
    api_version: config.openshift.io/v1 #
    patch:
      - op: replace
        path: /spec/channel #
        value: "{{ _target_hop_channel_role }}" #
    host: "{{ k8s_auth_params.host | default(omit) }}"
    api_key: "{{ k8s_auth_params.api_key | default(omit) }}"
    validate_certs: "{{ k8s_auth_params.validate_certs | default(omit) }}"
  when: _current_cluster_channel_fact_role != _target_hop_channel_role

- name: "UPGRADE_TRIGGER | Iniciar Upgrade para {{ _target_hop_version_role }}"
  kubernetes.core.k8s_patch:
    kind: ClusterVersion
    name: version
    api_version: config.openshift.io/v1
    patch:
      - op: replace
        path: /spec/desiredUpdate
        value:
          version: "{{ _target_hop_version_role }}"
          image: "{{ _target_hop_image_role }}"

- name: "UPGRADE_MONITOR | Pausa breve para CVO iniciar o processo"
  ansible.builtin.pause:
    seconds: 120
    prompt: "Aguardando 120s para CVO iniciar o upgrade para {{ _target_hop_version_role }}. Próximo passo: monitorar Masters."

- name: "UPGRADE_MONITOR | Monitorar atualização do MCP MASTER para {{ _target_hop_version_role }}"
  kubernetes.core.k8s_info:
    api_version: machineconfiguration.openshift.io/v1
    kind: MachineConfigPool
    name: "{{ master_mcp_to_monitor_fact }}"
    wait: yes
    wait_condition:
      - type: Updated
        status: "True"
      - type: Updating
        status: "False"
      - type: Degraded
        status: "False"
    wait_timeout: 7200 # 2 horas
    wait_sleep: 60
  register: r_master_mcp_wait_status
  failed_when: > # Condição de falha robusta
    not r_master_mcp_wait_status.resources or
    r_master_mcp_wait_status.resources | length == 0 or
    not (r_master_mcp_wait_status.resources[0].status.conditions | selectattr('type', 'equalto', 'Updated') | selectattr('status', 'equalto', 'True') | list) or
    (r_master_mcp_wait_status.resources[0].status.conditions | selectattr('type', 'equalto', 'Updating') | selectattr('status', 'equalto', 'True') | list) or
    (r_master_mcp_wait_status.resources[0].status.conditions | selectattr('type', 'equalto', 'Degraded') | selectattr('status', 'equalto', 'True') | list) or
    (r_master_mcp_wait_status.resources[0].status.updatedMachineCount | default(0) | int != r_master_mcp_wait_status.resources[0].status.machineCount | default(1) | int)

- name: "UPGRADE_MONITOR | Definir fato se Masters foram atualizados com sucesso"
  ansible.builtin.set_fact:
    masters_successfully_updated_fact: "{{ not r_master_mcp_wait_status.failed | default(false) }}"

- name: "UPGRADE_POST_MASTER | DESPAUSAR MCPs de Worker e Infra" #
  kubernetes.core.k8s_patch: #
    kind: MachineConfigPool #
    name: "{{ item_mcp_name }}" #
    api_version: machineconfiguration.openshift.io/v1 #
    patch: #
      - op: replace #
        path: /spec/paused #
        value: false #
  loop: "{{ _worker_infra_mcp_name_list_fact | default([]) }}" #
  loop_control:
    loop_var: item_mcp_name
    label: "Despausando MCP {{ item_mcp_name }}"
  when: masters_successfully_updated_fact | default(false) #

- name: "UPGRADE_MONITOR | Pausa breve para MCPs worker/infra iniciarem atualização"
  ansible.builtin.pause:
    seconds: 60
  when: masters_successfully_updated_fact | default(false)

- name: "UPGRADE_MONITOR | Aguarda o upgrade COMPLETO do ClusterVersion finalizar" #
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1 #
    kind: ClusterVersion #
    name: version #
    wait: true #
    wait_condition: #
      - type: "Progressing" #
        status: "False" #
      - type: "Available"
        status: "True"
      - type: "Failing"
        status: "False"
      - type: "Degraded"
        status: "False"
    wait_sleep: 60 #
    wait_timeout: 18000 # 5 horas (ajuste conforme necessário)
  register: r_cv_final_hop_status #
  when: masters_successfully_updated_fact | default(false)

- name: "UPGRADE_MONITOR | Verificar se ClusterVersion atingiu a versão alvo do salto"
  ansible.builtin.assert:
    that:
      - r_cv_final_hop_status.resources is defined
      - r_cv_final_hop_status.resources | length > 0
      - r_cv_final_hop_status.resources[0].status.desired.version == _target_hop_version_role
    fail_msg: "ClusterVersion não atingiu a versão alvo {{ _target_hop_version_role }}. Status: {{ r_cv_final_hop_status }}"
    success_msg: "ClusterVersion atingiu a versão alvo {{ _target_hop_version_role }}."
  when: masters_successfully_updated_fact | default(false) and not (r_cv_final_hop_status.failed | default(false))

- name: "UPGRADE_MONITOR | Verificar se todos MCPs (worker/infra) estão atualizados"
  kubernetes.core.k8s_info:
    api_version: machineconfiguration.openshift.io/v1
    kind: MachineConfigPool
    name: "{{ item_mcp_check_final }}"
    wait: yes
    wait_condition:
      - type: Updated
        status: "True"
      - type: Updating
        status: "False"
      - type: Degraded
        status: "False"
    wait_timeout: 7200 # 2 horas por grupo (worker/infra)
    wait_sleep: 30
  loop: "{{ _worker_infra_mcp_name_list_fact | default([]) }}"
  loop_control:
    loop_var: item_mcp_check_final
  register: r_worker_mcps_final_status_wait
  when: masters_successfully_updated_fact | default(false) and not (r_cv_final_hop_status.failed | default(false))

- name: "UPGRADE_MONITOR | Validar status final de todos os MCPs (worker/infra)"
  ansible.builtin.set_fact:
    all_worker_infra_mcps_final_updated_successfully: >-
      {{ not (r_worker_mcps_final_status_wait.results | default([]) |
              selectattr('failed', 'defined') |
              selectattr('failed', 'equalto', true) | list) and
         not (r_worker_mcps_final_status_wait.results | default([]) |
              map(attribute='resources') | flatten |
              selectattr('status.conditions', 'selectattr', 'type', 'equalto', 'Updated') |
              selectattr('status.conditions', 'selectattr', 'status', 'equalto', 'False') | list ) and
         not (r_worker_mcps_final_status_wait.results | default([]) |
              map(attribute='resources') | flatten |
              selectattr('status.conditions', 'selectattr', 'type', 'equalto', 'Degraded') |
              selectattr('status.conditions', 'selectattr', 'status', 'equalto', 'True') | list )
      }}
  when: masters_successfully_updated_fact | default(false) and not (r_cv_final_hop_status.failed | default(false))

- name: "UPGRADE_MONITOR | Definir status final do salto (interno à role)"
  ansible.builtin.set_fact:
    upgrade_hop_successful_internal: >-
      {{ (masters_successfully_updated_fact | default(false)) and
         not (r_cv_final_hop_status.failed | default(true)) and
         (r_cv_final_hop_status.resources[0].status.desired.version == _target_hop_version_role
          if r_cv_final_hop_status.resources is defined and r_cv_final_hop_status.resources | length > 0 and
             r_cv_final_hop_status.resources[0].status is defined and r_cv_final_hop_status.resources[0].status.desired is defined
          else false) and
         (all_worker_infra_mcps_final_updated_successfully | default(false)
          if (_worker_infra_mcp_name_list_fact | default([]) | length > 0) # Só checa workers se eles existem
          else true) # Se não há workers/infra para checar, considera sucesso nesta parte
      }}