# tasks/process_report_data_item.yml
# Este arquivo é incluído para cada 'comp_item' de 'comparison_results'.
# 'comp_item', 'snapshot_dir_before', 'snapshot_dir_after' estão disponíveis.
# 'executive_summary_data' e 'enriched_comparison_results' são atualizados.

- name: "Initialize data holders for processing: {{ comp_item.kind }} - {{ comp_item.file }}"
  ansible.builtin.set_fact:
    data_before_parsed_list: []
    data_after_parsed_list: []
    current_item_details: {} # Detalhes específicos para este comp_item (se necessário para o 'details' no relatório)

# --- Carregar conteúdo YAML 'ANTES' ---
- name: "Load 'before' YAML for {{ comp_item.kind }}: {{ comp_item.file }}"
  when: comp_item.state != 'Adicionado' and comp_item.state != 'Não encontrado em ambos snapshots' and comp_item.state != 'Erro de Leitura'
  ansible.builtin.slurp:
    src: "{{ snapshot_dir_before }}/{{ comp_item.file }}"
  register: local_yaml_before_slurped
  ignore_errors: true

- name: "Parse 'before' YAML for {{ comp_item.kind }}"
  when: not local_yaml_before_slurped.failed | default(true) and local_yaml_before_slurped.content is defined
  ansible.builtin.set_fact:
    data_before_parsed_list: "{{ local_yaml_before_slurped.content | b64decode | from_yaml_all | default([]) }}"
  ignore_errors: true # from_yaml_all pode falhar em arquivos malformados ou vazios

# --- Carregar conteúdo YAML 'DEPOIS' ---
- name: "Load 'after' YAML for {{ comp_item.kind }}: {{ comp_item.file }}"
  when: comp_item.state != 'Removido' and comp_item.state != 'Não encontrado em ambos snapshots' and comp_item.state != 'Erro de Leitura'
  ansible.builtin.slurp:
    src: "{{ snapshot_dir_after }}/{{ comp_item.file }}"
  register: local_yaml_after_slurped
  ignore_errors: true

- name: "Parse 'after' YAML for {{ comp_item.kind }}"
  when: not local_yaml_after_slurped.failed | default(true) and local_yaml_after_slurped.content is defined
  ansible.builtin.set_fact:
    data_after_parsed_list: "{{ local_yaml_after_slurped.content | b64decode | from_yaml_all | default([]) }}"
  ignore_errors: true

# --- Lógica para popular executive_summary_data ---
# (Esta lógica será executada para cada comp_item)

# ClusterOperators
- name: "Summarize ClusterOperator data (item: {{ comp_item.file }})"
  when: comp_item.kind == 'ClusterOperator'
  block:
    - name: Update CO Summary - Antes
      ansible.builtin.set_fact:
        executive_summary_data: "{{ executive_summary_data | combine({'cluster_operators': {'antes': executive_summary_data.cluster_operators.antes + co_extracted_list_antes }}, recursive=true) }}"
      vars:
        co_extracted_list_antes: >-
          {{ data_before_parsed_list | map('community.general.json_query', co_query) | list }}
        co_query: "[].{name: metadata.name, degraded: status.conditions[?type=='Degraded'].status | [0], available: status.conditions[?type=='Available'].status | [0], progressing: status.conditions[?type=='Progressing'].status | [0]}"
      when: data_before_parsed_list | length > 0

    - name: Update CO Summary - Depois
      ansible.builtin.set_fact:
        executive_summary_data: "{{ executive_summary_data | combine({'cluster_operators': {'depois': executive_summary_data.cluster_operators.depois + co_extracted_list_depois }}, recursive=true) }}"
      vars:
        co_extracted_list_depois: >-
          {{ data_after_parsed_list | map('community.general.json_query', co_query) | list }}
        co_query: "[].{name: metadata.name, degraded: status.conditions[?type=='Degraded'].status | [0], available: status.conditions[?type=='Available'].status | [0], progressing: status.conditions[?type=='Progressing'].status | [0]}"
      when: data_after_parsed_list | length > 0

# Deployments
- name: "Summarize Deployment data (item: {{ comp_item.file }})"
  when: comp_item.kind == 'Deployment'
  block:
    - name: Update Deployment Summary - Antes
      ansible.builtin.set_fact:
        executive_summary_data: "{{ executive_summary_data | combine({'deployments': {'antes_total': executive_summary_data.deployments.antes_total + (data_before_parsed_list | length), 'antes_problematic': executive_summary_data.deployments.antes_problematic + (data_before_parsed_list | selectattr('spec.replicas', 'notequalto', item.status.readyReplicas | default(0)) | list | length) }}, recursive=true) }}"
      when: data_before_parsed_list | length > 0

    - name: Update Deployment Summary - Depois
      ansible.builtin.set_fact:
        executive_summary_data: "{{ executive_summary_data | combine({'deployments': {'depois_total': executive_summary_data.deployments.depois_total + (data_after_parsed_list | length), 'depois_problematic': executive_summary_data.deployments.depois_problematic + (data_after_parsed_list | selectattr('spec.replicas', 'notequalto', item.status.readyReplicas | default(0)) | list | length) }}, recursive=true) }}"
      when: data_after_parsed_list | length > 0

# Pods
- name: "Summarize Pod data (item: {{ comp_item.file }})"
  when: comp_item.kind == 'Pod'
  block:
    - name: Update Pod Summary - Antes
      ansible.builtin.set_fact:
        executive_summary_data: "{{ executive_summary_data | combine({'pods': {'antes_problematic_count': executive_summary_data.pods.antes_problematic_count + (data_before_parsed_list | rejectattr('status.phase', 'in', ['Running', 'Succeeded']) | list | length) }}, recursive=true) }}"
      when: data_before_parsed_list | length > 0

    - name: Update Pod Summary - Depois
      ansible.builtin.set_fact:
        executive_summary_data: "{{ executive_summary_data | combine({'pods': {'depois_problematic_count': executive_summary_data.pods.depois_problematic_count + (data_after_parsed_list | rejectattr('status.phase', 'in', ['Running', 'Succeeded']) | list | length) }}, recursive=true) }}"
      when: data_after_parsed_list | length > 0

# --- Montar o item final enriquecido ---
# 'current_item_details' pode ser populado com mais dados específicos do kind se necessário para a seção de 'details' do relatório.
- name: "Assemble final enriched item for {{ comp_item.kind }}"
  ansible.builtin.set_fact:
    enriched_item_final_loop: "{{ comp_item | combine({'data_before': data_before_parsed_list, 'data_after': data_after_parsed_list, 'details': current_item_details }) }}"

- name: Append to global enriched_comparison_results
  ansible.builtin.set_fact:
    enriched_comparison_results: "{{ enriched_comparison_results + [enriched_item_final_loop] }}"