# tasks/process_single_resource_comparison.yml

- name: "Setup facts for {{ current_resource_def.kind }} comparison"
  ansible.builtin.set_fact:
    resource_file_name_comp: "{{ (current_resource_def.filename_override | default(current_resource_def.kind | lower + '.yml')) }}"
    file_path_before: "{{ snapshot_dir_before }}/{{ (current_resource_def.filename_override | default(current_resource_def.kind | lower + '.yml')) }}"
    file_path_after: "{{ snapshot_dir_after }}/{{ (current_resource_def.filename_override | default(current_resource_def.kind | lower + '.yml')) }}"
    current_comp_result: {}
    resource_diff_text: "Nenhum diff gerado ou aplicável."

- name: "Check existence of {{ current_resource_def.kind }} snapshot files"
  ansible.builtin.stat:
    path: "{{ item }}"
  loop:
    - "{{ file_path_before }}"
    - "{{ file_path_after }}"
  register: resource_files_stat

- name: "Determine existence flags for {{ current_resource_def.kind }}"
  ansible.builtin.set_fact:
    before_exists: "{{ resource_files_stat.results[0].stat.exists }}"
    after_exists: "{{ resource_files_stat.results[1].stat.exists }}"

- name: "Process comparison for {{ current_resource_def.kind }}"
  block:
    # ... (Tasks 'Handle ADDED' e 'Handle REMOVED' permanecem as mesmas) ...
    - name: "Handle ADDED: {{ current_resource_def.kind }}"
      when: not before_exists and after_exists
      ansible.builtin.set_fact:
        current_comp_result:
          kind: "{{ current_resource_def.kind }}"
          state: "Adicionado"
          file: "{{ resource_file_name_comp }}"
          diff: "Recurso não existia no snapshot 'antes_upgrade'."

    - name: "Handle REMOVED: {{ current_resource_def.kind }}"
      when: before_exists and not after_exists
      ansible.builtin.set_fact:
        current_comp_result:
          kind: "{{ current_resource_def.kind }}"
          state: "Removido"
          file: "{{ resource_file_name_comp }}"
          diff: "Recurso não encontrado no snapshot 'depois_upgrade'."

    - name: "Handle UNCHANGED or MODIFIED: {{ current_resource_def.kind }}"
      when: before_exists and after_exists
      block:
        - name: "Slurp content of {{ current_resource_def.kind }} files for comparison"
          ansible.builtin.slurp:
            src: "{{ item }}"
          loop:
            - "{{ file_path_before }}"
            - "{{ file_path_after }}"
          register: slurped_files
          ignore_errors: true

        - name: Decode slurped content
          ansible.builtin.set_fact:
            content_before: "{{ slurped_files.results[0].content | default('') | b64decode if not slurped_files.results[0].failed | default(true) else 'ERRO_LEITURA_ANTES' }}"
            content_after: "{{ slurped_files.results[1].content | default('') | b64decode if not slurped_files.results[1].failed | default(true) else 'ERRO_LEITURA_DEPOIS' }}"

        - name: "Process MODIFIED state for {{ current_resource_def.kind }}"
          when: 
            - content_before != 'ERRO_LEITURA_ANTES'
            - content_after != 'ERRO_LEITURA_DEPOIS'
            - content_before != content_after
          block:
            - name: Create temporary file for 'before' content
              ansible.builtin.tempfile:
                state: file
                prefix: "aro_diff_{{ current_resource_def.kind | lower | replace('/', '_') }}_before_"
              register: temp_before_file

            - name: Write 'before' content to temporary file
              ansible.builtin.copy:
                content: "{{ content_before }}"
                dest: "{{ temp_before_file.path }}"
              when: temp_before_file.path is defined

            - name: Create temporary file for 'after' content
              ansible.builtin.tempfile:
                state: file
                prefix: "aro_diff_{{ current_resource_def.kind | lower | replace('/', '_') }}_after_"
              register: temp_after_file

            - name: Write 'after' content to temporary file
              ansible.builtin.copy:
                content: "{{ content_after }}"
                dest: "{{ temp_after_file.path }}"
              when: temp_after_file.path is defined

            - name: "Generate diff for {{ current_resource_def.kind }} using Python script"
              ansible.builtin.command: >-
                python {{ playbook_dir }}/scripts/custom_diff.py
                {{ temp_before_file.path | quote }}
                {{ temp_after_file.path | quote }}
                "{{ resource_file_name_comp }} (antes)"
                "{{ resource_file_name_comp }} (depois)"
              register: script_diff_output
              changed_when: false
              failed_when: false # Trataremos o rc na task 'Set diff text'
              when:
                - temp_before_file.path is defined
                - temp_after_file.path is defined

            # ---- NOVO BLOCO DE DEBUG ----
            - name: "DEBUG and Save RAW SCRIPT OUTPUT for {{ current_resource_def.kind }}"
              block:
                - name: "Debug basic structure of script_diff_output"
                  ansible.builtin.debug:
                    msg:
                      - "Kind: {{ current_resource_def.kind }}"
                      - "File: {{ resource_file_name_comp }}"
                      - "script_diff_output.rc: {{ script_diff_output.rc | default('N/A (não definido)') }}"
                      - "script_diff_output.stdout IS DEFINED: {{ script_diff_output.stdout is defined }}"
                      - "script_diff_output.stdout LENGTH: {{ script_diff_output.stdout | length if script_diff_output.stdout is defined else 'N/A' }}"
                      - "script_diff_output.stderr IS DEFINED: {{ script_diff_output.stderr is defined }}"
                      - "script_diff_output.stderr LENGTH: {{ script_diff_output.stderr | length if script_diff_output.stderr is defined else 'N/A' }}"
                      - "script_diff_output.failed attribute: {{ script_diff_output.failed | default('N/A (não definido)') }}"
                      - "script_diff_output.skipped attribute: {{ script_diff_output.skipped | default('N/A (não definido)') }}"
                      - "script_diff_output.msg attribute: {{ script_diff_output.msg | default('N/A (não definido)') }}"
                  when: script_diff_output is defined # Se a variável foi registrada

                - name: "Save script_diff_output.stdout to /tmp for manual inspection"
                  ansible.builtin.copy:
                    content: "{{ script_diff_output.stdout | default('SCRIPT_STDOUT_NAO_DEFINIDO_OU_VAZIO') }}"
                    # Crie um nome de arquivo único para evitar sobrescrita e caracteres inválidos
                    dest: "/tmp/diff_out_{{ cluster_name | default('cluster') }}_{{ current_resource_def.kind | replace('/', '_') }}_{{ resource_file_name_comp | replace('.yml','') }}.txt"
                  when: script_diff_output is defined and script_diff_output.rc is defined and script_diff_output.rc == 0 and script_diff_output.stdout is defined
                  ignore_errors: true # Para não parar o playbook se esta escrita falhar

                - name: "Save script_diff_output.stderr to /tmp for manual inspection"
                  ansible.builtin.copy:
                    content: "{{ script_diff_output.stderr | default('SCRIPT_STDERR_NAO_DEFINIDO_OU_VAZIO') }}"
                    dest: "/tmp/diff_err_{{ cluster_name | default('cluster') }}_{{ current_resource_def.kind | replace('/', '_') }}_{{ resource_file_name_comp | replace('.yml','') }}.txt"
                  when: script_diff_output is defined and script_diff_output.rc is defined and script_diff_output.rc != 0 and script_diff_output.stderr is defined
                  ignore_errors: true
              when: script_diff_output is defined # Só executa este bloco se script_diff_output foi registrado
              ignore_errors: true # Permite que o playbook continue mesmo que este bloco de debug falhe
            # ---- FIM DO NOVO BLOCO DE DEBUG ----

            - name: Set diff text from Python script output
              ansible.builtin.set_fact:
                resource_diff_text: >-
                  {% if script_diff_output is defined and script_diff_output.rc is defined and script_diff_output.rc == 0 %}
                  {{ script_diff_output.stdout if script_diff_output.stdout | default('') | trim != '' else 'Conteúdo diferente, mas diff vazio.' }}
                  {% elif script_diff_output is defined and script_diff_output.rc is defined and script_diff_output.rc != 0 %}
                  Erro ao gerar diff com script (rc={{ script_diff_output.rc }}): {{ script_diff_output.stderr if script_diff_output.stderr | default('') | trim != '' else (script_diff_output.stdout if script_diff_output.stdout | default('') | trim != '' else 'Script Python não produziu output de erro específico.') }}
                  {% elif script_diff_output is defined and script_diff_output.failed is defined and script_diff_output.failed %}
                  Falha na execução do comando diff: {{ script_diff_output.msg | default('Sem mensagem de erro específica do Ansible.') }}
                  {% elif script_diff_output is defined and script_diff_output.skipped is defined and script_diff_output.skipped %}
                  Comando para gerar diff foi pulado.
                  {% else %}
                  Estado inesperado da variável script_diff_output (script pode não ter rodado ou rc não foi definido). Diff não gerado.
                  {% endif %}

            - name: Set state to Modificado (after attempting diff)
              ansible.builtin.set_fact:
                current_comp_result:
                  kind: "{{ current_resource_def.kind }}"
                  state: "Modificado"
                  file: "{{ resource_file_name_comp }}"
                  diff: "{{ resource_diff_text }}"

            - name: Clean up temporary files after diff
              block:
                - name: "Clean up temporary 'before' file: {{ temp_before_file.path | default('N/A') }}"
                  ansible.builtin.file:
                    path: "{{ temp_before_file.path }}"
                    state: absent
                  when: temp_before_file.path is defined
                  ignore_errors: true
                - name: "Clean up temporary 'after' file: {{ temp_after_file.path | default('N/A') }}"
                  ansible.builtin.file:
                    path: "{{ temp_after_file.path }}"
                    state: absent
                  when: temp_after_file.path is defined
                  ignore_errors: true
              always: true
        # Fim do bloco "Process MODIFIED state"

        - name: "Mark {{ current_resource_def.kind }} as UNCHANGED or handle read errors"
          # ... (task inalterada) ...
          when: 
            - content_before == 'ERRO_LEITURA_ANTES' or 
              content_after == 'ERRO_LEITURA_DEPOIS' or
              (content_before != 'ERRO_LEITURA_ANTES' and content_after != 'ERRO_LEITURA_DEPOIS' and content_before == content_after)
          ansible.builtin.set_fact:
            current_comp_result:
              kind: "{{ current_resource_def.kind }}"
              state: "{{ 'Erro de Leitura' if content_before == 'ERRO_LEITURA_ANTES' or content_after == 'ERRO_LEITURA_DEPOIS' else 'Inalterado' }}"
              file: "{{ resource_file_name_comp }}"
              diff: "{{ 'Não foi possível ler um ou ambos os arquivos para comparação.' if content_before == 'ERRO_LEITURA_ANTES' or content_after == 'ERRO_LEITURA_DEPOIS' else '' }}"

    # Fim do bloco "Handle UNCHANGED or MODIFIED"
    - name: "Handle MISSING from both snapshots: {{ current_resource_def.kind }}"
      # ... (task inalterada) ...
      when: not before_exists and not after_exists
      ansible.builtin.set_fact:
        current_comp_result:
          kind: "{{ current_resource_def.kind }}"
          state: "Não encontrado em ambos snapshots"
          file: "{{ resource_file_name_comp }}"
          diff: "Recurso não capturado em nenhum dos snapshots."

  always:
    - name: Aggregate comparison result for {{ current_resource_def.kind }}
      ansible.builtin.set_fact:
        comparison_results: "{{ comparison_results + [current_comp_result] if current_comp_result.kind is defined else comparison_results }}"