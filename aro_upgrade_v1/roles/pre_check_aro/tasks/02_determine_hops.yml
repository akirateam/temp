---
- name: "Inicializar variáveis para determinação de saltos em {{ cluster_name }}"
  ansible.builtin.set_fact:
    calculated_upgrade_hops: []
    control_mcps_globally: false

- name: "Determinar saltos para alvo {{ target_aro_version }} (Canal: {{ target_channel_eus }})"
  vars:
    current_major_minor: "{{ current_cluster_version.split('.')[0] }}.{{ current_cluster_version.split('.')[1] }}"
  block:
    - name: "Definir caminho de upgrade para {{ target_aro_version }}"
      ansible.builtin.set_fact:
        calculated_upgrade_hops: ["4.15.44", "4.16.40"]
        control_mcps_globally: true
      when:
        - target_aro_version == "4.16.40"
        - target_channel_eus == "eus-4.16"
        - current_major_minor == "4.14"

    - name: "Definir caminho de upgrade para {{ target_aro_version }}"
      ansible.builtin.set_fact:
        calculated_upgrade_hops: ["4.17.29", "4.18.13"]
        control_mcps_globally: true
      when:
        - target_aro_version == "4.18.13"
        - target_channel_eus == "eus-4.18"
        - current_major_minor == "4.16"

    - name: "Verificar se um caminho de upgrade estático foi definido para {{ target_aro_version }}"
      ansible.builtin.assert:
        that:
          - calculated_upgrade_hops | length > 0
        fail_msg: >
          Nenhum caminho de upgrade estático definido para a combinação de:
          Versão Alvo: {{ target_aro_version }}, Canal Alvo: {{ target_channel_eus }},
          e Versão Corrente Major.Minor: {{ current_major_minor }}.
          Verifique as condições e os caminhos estáticos definidos.
      when: control_mcps_globally

    - name: "Ajustar saltos se a versão atual já ultrapassou algum intermediário"
      when: calculated_upgrade_hops | length > 0
      block:
        - name: "Filtrar saltos que já são <= current_cluster_version"
          ansible.builtin.set_fact:
            _temp_hops_filtered: "{{ calculated_upgrade_hops | select('version', '>', current_cluster_version) | list }}"

        - name: "Atualizar calculated_upgrade_hops com os saltos filtrados"
          ansible.builtin.set_fact:
            calculated_upgrade_hops: "{{ _temp_hops_filtered }}"

        - name: "Debug: Saltos após filtro inicial"
          ansible.builtin.debug:
            var: calculated_upgrade_hops
            verbosity: 1

        - name: "Verificar se, após filtragem, o último salto ainda é o alvo (se houver saltos restantes)"
          when: calculated_upgrade_hops | length > 0
          ansible.builtin.assert:
            that:
              - (target_aro_version in calculated_upgrade_hops and calculated_upgrade_hops[-1] == target_aro_version) or \
                (target_aro_version not in calculated_upgrade_hops and current_cluster_version is version(target_aro_version, '>='))
            fail_msg: >
              Após filtrar os saltos que já foram ultrapassados, o último salto restante
              ({{ calculated_upgrade_hops[-1] if calculated_upgrade_hops | length > 0 else 'NENHUM' }})
              não corresponde à 'target_aro_version' ({{ target_aro_version }}),
              ou o alvo foi removido indevidamente.
              Saltos calculados: {{ calculated_upgrade_hops }}. Versão Atual: {{ current_cluster_version }}.

        - name: "Garantir que o target_aro_version é o último salto se ainda não foi alcançado e está na lista"
          when: calculated_upgrade_hops | length > 0 and calculated_upgrade_hops[-1] != target_aro_version and target_aro_version in calculated_upgrade_hops
          ansible.builtin.set_fact:
            calculated_upgrade_hops: "{{ (calculated_upgrade_hops | reject('equalto', target_aro_version) | list) + [target_aro_version] }}"
  when: "current_cluster_version is version(target_aro_version, '<')"

- name: "Definir saltos vazios se já estiver no alvo ou além"
  ansible.builtin.set_fact:
    calculated_upgrade_hops: []
    control_mcps_globally: false
  when: "current_cluster_version is version(target_aro_version, '>=')"


- name: "Exibir saltos de upgrade EUS finais para {{ cluster_name }}"
  ansible.builtin.debug:
    msg: "Cluster {{ cluster_name }}: Saltos de upgrade calculados: {{ calculated_upgrade_hops }}. Controle Global de MCPs: {{ control_mcps_globally }}"
  when: calculated_upgrade_hops is defined

- name: "Falhar se nenhum salto foi determinado e o upgrade é necessário"
  ansible.builtin.fail:
    msg: "Nenhum salto de upgrade foi determinado para {{ target_aro_version }} a partir de {{ current_cluster_version }} para o cluster {{ cluster_name }}. Verifique os critérios de target_aro_version e current_major_minor."
  when:
    - "current_cluster_version is version(target_aro_version, '<')"
    - calculated_upgrade_hops is not defined or calculated_upgrade_hops | length == 0