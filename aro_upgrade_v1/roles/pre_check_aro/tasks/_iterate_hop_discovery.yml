---
- name: "Iteração {{ iteration + 1 }} (interno): Buscando próximo salto de {{ simulated_current_version }} (canal EUS simulado: {{ simulated_current_eus_channel }})"
  ansible.builtin.set_fact:
    next_hop_candidate_p1: null
    next_hop_candidate_p2: null
    hop_found_this_iteration: false
    _processed_candidates_p1: []
    _processed_candidates_p2: []

- name: "Prioridade 1 (interno): Coletar candidatos de patch EUS em {{ simulated_current_eus_channel }}"
  ansible.builtin.set_fact:
    _processed_candidates_p1: "{{ _processed_candidates_p1 + [item.version] }}"
  loop: "{{ live_available_updates_param }}"
  loop_control:
    label: "{{ item.version }}"
  when:
    - item.version.split('.')[0] == simulated_current_version.split('.')[0]
    - item.version.split('.')[1] == simulated_current_version.split('.')[1]
    - item.version is version(simulated_current_version, '>')
    - (simulated_current_eus_channel in (item.channels | default([]))) or \
      (simulated_current_eus_channel == "eus-" + item.version.split('.')[0] + "." + item.version.split('.')[1])
    - (simulated_current_eus_channel == target_channel_eus and item.version is version(target_aro_version, '<=')) or \
      (simulated_current_eus_channel != target_channel_eus)

- name: Definir next_hop_candidate com base na Prioridade 1 (interno)
  ansible.builtin.set_fact:
    next_hop_candidate_p1: "{{ (_processed_candidates_p1 | sort(version=true) | first) if _processed_candidates_p1 | length > 0 else null }}"

- name: "Prioridade 2 (interno): Calcular variáveis para salto inter-minor"
  ansible.builtin.set_fact:
    simulated_major_int_calc: "{{ simulated_current_version.split('.')[0] | int }}"
    simulated_minor_int_calc: "{{ simulated_current_version.split('.')[1] | int }}"
    target_channel_major_int_calc: "{{ target_channel_eus.split('-')[1].split('.')[0] | int }}"
    target_channel_minor_int_calc: "{{ target_channel_eus.split('-')[1].split('.')[1] | int }}"
  when: next_hop_candidate_p1 is none

- name: "Prioridade 2 (interno): Determinar próximo canal EUS para salto inter-minor"
  ansible.builtin.set_fact:
    expected_next_eus_minor_val_calc: >-
      {%- if simulated_major_int_calc == target_channel_major_int_calc and simulated_minor_int_calc < target_channel_minor_int_calc -%}
      {{ simulated_minor_int_calc + 2 }}
      {%- else -%}
      {{- -1 -}}
      {%- endif -%}
    _next_channel_to_check_calc_intermediate: ""
  when: next_hop_candidate_p1 is none

- name: "Prioridade 2 (interno): Definir _next_channel_to_check_calc_intermediate"
  ansible.builtin.set_fact:
    _next_channel_to_check_calc_intermediate: >-
      {%- if expected_next_eus_minor_val_calc | int != -1 and (expected_next_eus_minor_val_calc | int) <= (target_channel_minor_int_calc | int) -%}
      eus-{{ simulated_major_int_calc }}.{{ expected_next_eus_minor_val_calc }}
      {%- else -%}
      ""
      {%- endif -%}
  when:
    - next_hop_candidate_p1 is none
    - expected_next_eus_minor_val_calc is defined

- name: "Prioridade 2 (interno): Coletar candidatos de salto para próximo EUS minor (objetivando {{ target_channel_eus }})"
  ansible.builtin.set_fact:
    _processed_candidates_p2: "{{ _processed_candidates_p2 + [item.version] }}"
  loop: "{{ live_available_updates_param }}"
  loop_control:
    label: "{{ item.version }}"
  when:
    - next_hop_candidate_p1 is none
    - _next_channel_to_check_calc_intermediate | length > 0
    - item.version.split('.')[0] | int == (simulated_major_int_calc | int)
    - item.version.split('.')[1] | int == (expected_next_eus_minor_val_calc | int)
    - item.version is version(simulated_current_version, '>')
    - (_next_channel_to_check_calc_intermediate in (item.channels | default([])))
    - (_next_channel_to_check_calc_intermediate == target_channel_eus and item.version is version(target_aro_version, '<=')) or \
      (_next_channel_to_check_calc_intermediate != target_channel_eus)

- name: Definir next_hop_candidate com base na Prioridade 2 (interno)
  ansible.builtin.set_fact:
    next_hop_candidate_p2: "{{ (_processed_candidates_p2 | sort(version=true) | first) if _processed_candidates_p2 | length > 0 else null }}"
  when: next_hop_candidate_p1 is none

- name: Decidir o próximo salto final e se um hop foi encontrado
  ansible.builtin.set_fact:
    final_next_hop_candidate: "{{ next_hop_candidate_p1 if next_hop_candidate_p1 is not none else next_hop_candidate_p2 }}"
    hop_found_this_iteration: "{{ (next_hop_candidate_p1 is not none) or (next_hop_candidate_p2 is not none) }}"
    simulated_current_eus_channel: >-
      {{ _next_channel_to_check_calc_intermediate
         if (next_hop_candidate_p1 is none and next_hop_candidate_p2 is not none and _next_channel_to_check_calc_intermediate | length > 0)
         else simulated_current_eus_channel }}

- name: Registrar salto encontrado e atualizar simulação (interno)
  when: hop_found_this_iteration and final_next_hop_candidate is not none
  block:
    - ansible.builtin.debug:
        msg: "Cluster {{ cluster_name }}: Salto EUS encontrado de {{ simulated_current_version }} para {{ final_next_hop_candidate }} (canal EUS simulado para próximo salto: {{ simulated_current_eus_channel }})"
    - ansible.builtin.set_fact:
        calculated_upgrade_hops: "{{ calculated_upgrade_hops + [final_next_hop_candidate] }}"
        simulated_current_version: "{{ final_next_hop_candidate }}"

- name: "Definir flag se nenhum salto foi encontrado nesta iteração (para quebrar loop pai)"
  ansible.builtin.set_fact:
    _no_more_hops_can_be_found: true
  when: not hop_found_this_iteration

- name: "Incrementar contador de iteração (para debug e controle do loop pai)"
  ansible.builtin.set_fact:
    iteration: "{{ iteration | int + 1 }}"