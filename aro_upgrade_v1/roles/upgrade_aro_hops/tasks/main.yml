---
- name: Validar variáveis de entrada do job anterior (Fase de Upgrade)
  ansible.builtin.assert:
    - control_mcps_globally_stat is defined
    quiet: true

- name: Definir fatos locais a partir de stats do job anterior (Fase de Upgrade)
  ansible.builtin.set_fact:
    cluster_name: "{{ cluster_name_stat }}"
    upgrade_hops: "{{ upgrade_hops_stat }}"
    target_aro_version: "{{ target_aro_version_stat }}"
    target_channel_eus: "{{ target_channel_eus_stat }}"
    control_mcps_globally: "{{ control_mcps_globally_stat | bool }}"
    _initial_cluster_version_for_summary: "{{ current_cluster_version_stat }}"
    _initial_cluster_channel_for_summary: "{{ initial_cluster_channel_stat }}"
    _original_pdbs_specs_passthrough: "{{ original_pdbs_specs_stat | default([]) }}"
    _original_pdbs_metadata_passthrough: "{{ original_pdbs_metadata_stat | default([]) }}"

- name: "Informar sobre os saltos a serem realizados em {{ cluster_name }}"
  ansible.builtin.debug:
    msg: "Cluster: {{ cluster_name }}. Iniciando processo de upgrade com os seguintes saltos: {{ upgrade_hops }}. Controle Global de MCPs: {{ control_mcps_globally }}"
  when: upgrade_hops | length > 0

- name: "PAUSAR MCPs (worker) globalmente em {{ cluster_name }} para a sequência de upgrades"
  kubernetes.core.k8s_patch:
    kind: MachineConfigPool
    api_version: machineconfiguration.openshift.io/v1
    name: worker
    definition:
      spec:
        paused: true
    retries: 3
    delay: 10
  register: r_mcp_global_pause_status
  when: upgrade_hops | length > 0 and control_mcps_globally

- name: "Aguardar MCP worker ser efetivamente pausado globalmente em {{ cluster_name }}"
  kubernetes.core.k8s_info:
    kind: MachineConfigPool
    api_version: machineconfiguration.openshift.io/v1
    name: worker
  register: r_mcp_check_globally_paused
  until: (r_mcp_check_globally_paused.resources[0].status.conditions | selectattr('type', 'equalto', 'Paused') | first).status == 'True'
  retries: 12
  delay: 30
  when: upgrade_hops | length > 0 and control_mcps_globally and r_mcp_global_pause_status.changed

- name: Iterar sobre os saltos de upgrade para {{ cluster_name }}
  include_tasks: _perform_single_hop.yml
  loop: "{{ upgrade_hops }}"
  loop_control:
    loop_var: target_hop_version
  vars:
    perform_mcp_pause_unpause_per_hop: false
  when: upgrade_hops | length > 0
  register: r_hop_results

- name: "DESPAUSAR MCPs (worker) globalmente em {{ cluster_name }} após todos os upgrades"
  kubernetes.core.k8s_patch:
    kind: MachineConfigPool
    api_version: machineconfiguration.openshift.io/v1
    name: worker
    definition:
      spec:
        paused: false
  register: r_mcp_global_unpause_status
  when: upgrade_hops | length > 0 and control_mcps_globally

- name: "Aguardar MCP worker concluir a atualização APÓS despausar globalmente em {{ cluster_name }}"
  kubernetes.core.k8s_info:
    kind: MachineConfigPool
    api_version: machineconfiguration.openshift.io/v1
    name: worker
  register: r_mcp_status_globally_updated
  until: >
    r_mcp_status_globally_updated.resources is defined and
    r_mcp_status_globally_updated.resources | length > 0 and
    r_mcp_status_globally_updated.resources[0].status.updatedMachineCount == r_mcp_status_globally_updated.resources[0].status.machineCount and
    (r_mcp_status_globally_updated.resources[0].status.conditions | selectattr('type', 'equalto', 'Updating') | first).status == 'False' and
    (r_mcp_status_globally_updated.resources[0].status.conditions | selectattr('type', 'equalto', 'Degraded') | first).status == 'False' and
    ( (r_mcp_status_globally_updated.resources[0].status.conditions | selectattr('type', 'equalto', 'Paused') | first).status == 'False' or
      not (r_mcp_status_globally_updated.resources[0].status.conditions | selectattr('type', 'equalto', 'Paused') | list) )
  retries: 240
  delay: 60
  when: upgrade_hops | length > 0 and control_mcps_globally and r_mcp_global_unpause_status.changed
  vars:
    ansible_command_timeout: 7200

- name: "Health Check final dos MCPs após despausa global em {{ cluster_name }}"
  include_tasks: _common_health_check.yml
  vars:
    health_check_stage_name: "Cluster {{ cluster_name }} - Pós-Upgrade e Despausa Global de MCPs"
  when: upgrade_hops | length > 0 and control_mcps_globally and r_mcp_global_unpause_status.changed


- name: "Obter versão final do cluster {{ cluster_name }} após todos os saltos"
  kubernetes.core.k8s_info:
    kind: ClusterVersion
    api_version: config.openshift.io/v1
    name: version
  register: r_final_cluster_version_info
  retries: 3
  delay: 10

- name: Definir final_achieved_version
  ansible.builtin.set_fact:
    final_achieved_version: "{{ r_final_cluster_version_info.resources[0].status.desired.version if (r_final_cluster_version_info.resources is defined and r_final_cluster_version_info.resources | length > 0) else _initial_cluster_version_for_summary }}"

- name: Expor dados para o próximo Job Template (Post-Check)
  ansible.builtin.set_stats:
    data:
      final_achieved_version_stat: "{{ final_achieved_version }}"
      target_aro_version_stat: "{{ target_aro_version }}"
      target_channel_eus_stat: "{{ target_channel_eus }}"
      cluster_name_stat: "{{ cluster_name }}"
      initial_cluster_version_stat: "{{ _initial_cluster_version_for_summary }}"
      initial_cluster_channel_stat: "{{ _initial_cluster_channel_for_summary }}"
      original_pdbs_specs_stat: "{{ _original_pdbs_specs_passthrough }}"
      original_pdbs_metadata_stat: "{{ _original_pdbs_metadata_passthrough }}"
    per_host: false